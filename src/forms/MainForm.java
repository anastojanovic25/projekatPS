/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import controller.Controller;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableCellRenderer;
import model.Korisnik;
import model.Predstava;
import model.Repertoar;
import tableModel.TableModelRepertoar;

/**
 *
 * @author Ana
 */
public class MainForm extends javax.swing.JFrame {
    List<Repertoar> lista=Controller.getInstance().vratiListuRepertoara();
    Korisnik korisnik;
    /**
     * Creates new form MainForm
     */
    public MainForm(Korisnik k) {
        initComponents();
        popuniComboBox();
        jLabel2.setText(k.getIme()+" "+k.getPrezime());
        
        
        TableModelRepertoar tmr=new TableModelRepertoar(lista);
        jTableRepertoar.setModel(tmr);
       
        
      
        korisnik=k;
        
        //za datum u tabeli
        jTableRepertoar.getColumnModel().getColumn(0).setCellRenderer(new TableCellRenderer() {
            SimpleDateFormat formatter = new SimpleDateFormat("dd.MM.yyyy");

            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                JLabel label = new JLabel();
                if (value instanceof Date) {
                    label.setText(formatter.format(value));
                }
                label.setOpaque(true);
                
                if (isSelected) {
                    label.setBackground(table.getSelectionBackground());
                    label.setForeground(table.getSelectionForeground());
                } else {
                    label.setBackground(table.getBackground());
                    label.setForeground(table.getForeground());
                }
                return label;
            }
        });
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableRepertoar = new javax.swing.JTable();
        jButtonObrisi = new javax.swing.JButton();
        jButtonDetalji = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldDay = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldMonth = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldYear = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jButtonFiltriraj = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButtonOcistiFilter = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Dobrodosli,");

        jTableRepertoar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableRepertoar);

        jButtonObrisi.setText("Obrisi");
        jButtonObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonObrisiActionPerformed(evt);
            }
        });

        jButtonDetalji.setText("Detalji");
        jButtonDetalji.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDetaljiActionPerformed(evt);
            }
        });

        jLabel5.setText("Datum:");

        jLabel6.setText("/");

        jLabel7.setText("/");

        jLabel8.setText("Predstava:");

        jButtonFiltriraj.setText("Filtriraj");
        jButtonFiltriraj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFiltrirajActionPerformed(evt);
            }
        });

        jLabel4.setText("Dan       Mesec   Godina");

        jButtonOcistiFilter.setText("Ocisti filter");
        jButtonOcistiFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOcistiFilterActionPerformed(evt);
            }
        });

        jMenu1.setText("Repertoar");

        jMenuItem1.setText("Dodaj");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Predstave");

        jMenuItem4.setText("Prikazi sve predstave");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("Dodaj novu predstavu");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(85, 85, 85)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 775, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 151, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextFieldDay, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6)
                                .addGap(5, 5, 5)
                                .addComponent(jTextFieldMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldYear, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(61, 61, 61)
                                .addComponent(jButtonFiltriraj)
                                .addGap(31, 31, 31)
                                .addComponent(jButtonOcistiFilter)))
                        .addContainerGap(857, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(383, 383, 383)
                .addComponent(jButtonDetalji)
                .addGap(163, 163, 163)
                .addComponent(jButtonObrisi)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonFiltriraj)
                            .addComponent(jButtonOcistiFilter)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jTextFieldDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(jTextFieldMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(jTextFieldYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(298, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonObrisi)
                            .addComponent(jButtonDetalji))
                        .addGap(227, 227, 227))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonObrisiActionPerformed
        
        int selektovano=jTableRepertoar.getSelectedRow();
        if(selektovano==-1){
            JOptionPane.showMessageDialog(this,"Morate da oznacite sta zelite da obrisete", "GRESKA", JOptionPane.ERROR_MESSAGE);
        }else{
            Repertoar r=lista.get(selektovano);
            Controller.getInstance().obrisiPredstavuURepertoaru(r);
            azurirajTabelu();
        }
            
    }//GEN-LAST:event_jButtonObrisiActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        AddRepertoar ar=new AddRepertoar(this, true,null);
        ar.setVisible(true);
        azurirajTabelu();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
    
        AddPerformance ap=new AddPerformance(this, true,korisnik);
        ap.setVisible(true);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        ShowPerformances sp=new ShowPerformances(this, true, korisnik);
        sp.setVisible(true);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jButtonFiltrirajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFiltrirajActionPerformed
        if((jTextFieldDay.getText().trim().equals("") || jTextFieldMonth.getText().trim().equals("") || jTextFieldYear.getText().trim().equals("")) && jComboBox1.getSelectedItem()==null){
            azurirajTabelu();
            JOptionPane.showMessageDialog(this,"Morate uneti odgovarajuce parametre", "GRESKA", JOptionPane.ERROR_MESSAGE);
        }
        else if((jTextFieldDay.getText().trim().equals("") || jTextFieldMonth.getText().trim().equals("") || jTextFieldYear.getText().trim().equals("")) && jComboBox1.getSelectedItem()!=null){
           Predstava p=(Predstava) jComboBox1.getSelectedItem();
            vratiFiltriranoSaPredstavom(p);
        }else if(!(jTextFieldDay.getText().trim().equals("") || jTextFieldMonth.getText().trim().equals("") || jTextFieldYear.getText().trim().equals("")) && jComboBox1.getSelectedItem()==null){
            String dan=jTextFieldDay.getText();
            String mesec=jTextFieldMonth.getText();
            String godina=jTextFieldYear.getText();
            String datum=dan+"."+mesec+"."+godina;
            if(!datum.matches("^(0?[1-9]|[12][0-9]|3[01])\\.(0?[1-9]|1[0-2])\\.(\\d+)$")){
                 JOptionPane.showMessageDialog(this,"Morate uneti datum u odgovarajucem formatu", "GRESKA", JOptionPane.ERROR_MESSAGE);
      
            }else{
                try {
                    vratiFiltriranoSaDatumom(datum);
                } catch (ParseException ex) {
                    Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }else{
            Predstava p=(Predstava) jComboBox1.getSelectedItem();
            vratiFiltriranoSaPredstavom(p);
            String dan=jTextFieldDay.getText();
            String mesec=jTextFieldMonth.getText();
            String godina=jTextFieldYear.getText();
            String datum=dan+"."+mesec+"."+godina;
            if(!datum.matches("^(0?[1-9]|[12][0-9]|3[01])\\.(0?[1-9]|1[0-2])\\.(\\d+)$")){
                 JOptionPane.showMessageDialog(this,"Morate uneti datum u odgovarajucem formatu", "GRESKA", JOptionPane.ERROR_MESSAGE);
      
            }else{
                vratiFiltriranoOba(p,datum);
            }
        }



    }//GEN-LAST:event_jButtonFiltrirajActionPerformed

    private void jButtonDetaljiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDetaljiActionPerformed
        int selektovano=jTableRepertoar.getSelectedRow();
        if(selektovano==-1){
            JOptionPane.showMessageDialog(this,"Morate da oznacite", "GRESKA", JOptionPane.ERROR_MESSAGE);
        }else{
            Repertoar r=lista.get(selektovano);
           RepertoarDetails rd=new RepertoarDetails(this, true, r);
           rd.setVisible(true);
        }

    }//GEN-LAST:event_jButtonDetaljiActionPerformed

    private void jButtonOcistiFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOcistiFilterActionPerformed
        jTextFieldDay.setText("");
        jTextFieldYear.setText("");
        jTextFieldMonth.setText("");
        jComboBox1.setSelectedItem(null);
        
        azurirajTabelu();
    }//GEN-LAST:event_jButtonOcistiFilterActionPerformed

 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDetalji;
    private javax.swing.JButton jButtonFiltriraj;
    private javax.swing.JButton jButtonObrisi;
    private javax.swing.JButton jButtonOcistiFilter;
    private javax.swing.JComboBox<Predstava> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableRepertoar;
    private javax.swing.JTextField jTextFieldDay;
    private javax.swing.JTextField jTextFieldMonth;
    private javax.swing.JTextField jTextFieldYear;
    // End of variables declaration//GEN-END:variables

    private void azurirajTabelu() {
       List<Repertoar> lista2=Controller.getInstance().vratiListuRepertoara();
         TableModelRepertoar tmr=new TableModelRepertoar(lista2);
        jTableRepertoar.setModel(tmr);
            jTableRepertoar.getColumnModel().getColumn(0).setCellRenderer(new TableCellRenderer() {
            SimpleDateFormat formatter = new SimpleDateFormat("dd.MM.yyyy");

            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                JLabel label = new JLabel();
                if (value instanceof Date) {
                    label.setText(formatter.format(value));
                }
                label.setOpaque(true);
                if (isSelected) {
                    label.setBackground(table.getSelectionBackground());
                    label.setForeground(table.getSelectionForeground());
                } else {
                    label.setBackground(table.getBackground());
                    label.setForeground(table.getForeground());
                }
                return label;
            }
        });
        

    }
    public void popuniComboBox(){
        List<Predstava> lista=Controller.getInstance().vratiListuPredstava();
        jComboBox1.addItem(null);
        for (Predstava predstava : lista) {
            jComboBox1.addItem(predstava);
        }
    }

    private void vratiFiltriranoSaPredstavom(Predstava p) {
         List<Repertoar> listaRep=Controller.getInstance().vratiListuRepertoaraOdgovarajucePredstave(p);
         TableModelRepertoar tmr=new TableModelRepertoar(listaRep);
        jTableRepertoar.setModel(tmr);
            jTableRepertoar.getColumnModel().getColumn(0).setCellRenderer(new TableCellRenderer() {
            SimpleDateFormat formatter = new SimpleDateFormat("dd.MM.yyyy");

            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                JLabel label = new JLabel();
                if (value instanceof Date) {
                    label.setText(formatter.format(value));
                }
                label.setOpaque(true);
                if (isSelected) {
                    label.setBackground(table.getSelectionBackground());
                    label.setForeground(table.getSelectionForeground());
                } else {
                    label.setBackground(table.getBackground());
                    label.setForeground(table.getForeground());
                }
                return label;
            }
        });
    }

    private void vratiFiltriranoSaDatumom(String datum) throws ParseException {
         List<Repertoar> listaRep=Controller.getInstance().vratiListuRepertoaraDatum(datum);
         TableModelRepertoar tmr=new TableModelRepertoar(listaRep);
        jTableRepertoar.setModel(tmr);
            jTableRepertoar.getColumnModel().getColumn(0).setCellRenderer(new TableCellRenderer() {
            SimpleDateFormat formatter = new SimpleDateFormat("dd.MM.yyyy");

            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                JLabel label = new JLabel();
                if (value instanceof Date) {
                    label.setText(formatter.format(value));
                }
                label.setOpaque(true);
                if (isSelected) {
                    label.setBackground(table.getSelectionBackground());
                    label.setForeground(table.getSelectionForeground());
                } else {
                    label.setBackground(table.getBackground());
                    label.setForeground(table.getForeground());
                }
                return label;
            }
        });
    }

    private void vratiFiltriranoOba(Predstava p, String datum) {
        List<Repertoar> listaRep=Controller.getInstance().vratiListuRepertoaraOba(datum,p);
         TableModelRepertoar tmr=new TableModelRepertoar(listaRep);
        jTableRepertoar.setModel(tmr);
            jTableRepertoar.getColumnModel().getColumn(0).setCellRenderer(new TableCellRenderer() {
            SimpleDateFormat formatter = new SimpleDateFormat("dd.MM.yyyy");

            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                JLabel label = new JLabel();
                if (value instanceof Date) {
                    label.setText(formatter.format(value));
                }
                label.setOpaque(true);
                if (isSelected) {
                    label.setBackground(table.getSelectionBackground());
                    label.setForeground(table.getSelectionForeground());
                } else {
                    label.setBackground(table.getBackground());
                    label.setForeground(table.getForeground());
                }
                return label;
            }
        });
    }
}
